#!/usr/bin/env bash
n=1

# Enable this option to prevent stunnel failure with Amazon RDS when a dyno resumes after sleeping
if [ -z "${ENABLE_STUNNEL_AMAZON_RDS_FIX}" ]; then
  AMAZON_RDS_STUNNEL_OPTION=""
else
  AMAZON_RDS_STUNNEL_OPTION="options = NO_TICKET"
fi

mkdir -p /app/vendor/stunnel/var/run/stunnel/
cat > /app/vendor/stunnel/stunnel.conf << EOFEOF
foreground = yes

pid = /tmp/stunnel4.pid

options = NO_SSLv2
options = SINGLE_ECDH_USE
options = SINGLE_DH_USE
socket = r:TCP_NODELAY=1
options = NO_SSLv3
${AMAZON_RDS_STUNNEL_OPTION}
ciphers = HIGH:!ADH:!AECDH:!LOW:!EXP:!MD5:!3DES:!SRP:!PSK:@STRENGTH
debug = ${STUNNEL_LOGLEVEL:-notice}
EOFEOF

if [ -z $STUNNEL_URLS ]; then
    STUNNEL_URLS="DATABASE_URL"
fi

for STUNNEL_URL in "$STUNNEL_URLS"; do
  eval STUNNEL_URL_VALUE="\$$STUNNEL_URL"


  parts=( $(echo "$STUNNEL_URL_VALUE" | perl -lne 'print "$1 $2 $3 $4 $5" if /^postgres(?:ql)?:\/\/([^:@]*)(?::([^@]*))?@([^:\/]*?)(?::(.*?))?\/(.*?)$/') )

  DB_USER="${parts[0]}"
  DB_PASS="${parts[1]}"
  DB_HOST="${parts[2]}"
  DB_PORT="${parts[3]}"
  DB_NAME="${parts[4]}"

  if [[ -n $DB_PASS ]]; then
      DB_USER="$DB_USER:$DB_PASS"
  fi
  export ${STUNNEL_URL}="postgres://$DB_USER@:610${n}/$DB_NAME"
  echo "Setting \$${STUNNEL_URL} environment var to $(eval echo \$$STUNNEL_URL)"

  cat >> /app/vendor/stunnel/stunnel.conf << EOFEOF
[postgresql-${STUNNEL_URL}]
client = yes
protocol = pgsql
accept  = /tmp/.s.PGSQL.610${n}
connect = $DB_HOST:$DB_PORT
retry = ${STUNNEL_CONNECTION_RETRY:-"no"}
EOFEOF

  if [[ -n ${STUNNEL_CA_FILE} ]]; then
      cat >> /app/vendor/stunnel/stunnel.conf << EOFEOF
verify = 1
CAfile = ${STUNNEL_CA_FILE:-/dev/null}
EOFEOF
  fi

  let "n += 1"
done

chmod go-rwx /app/vendor/stunnel/*
